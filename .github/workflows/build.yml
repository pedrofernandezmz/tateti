name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: mydb
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build y Correr contenedor MySQL
        run: |
          docker build -t mydb ./database
          docker run -d --name mydb -p 3306:3306 --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3 mydb
        working-directory: .

      - name: Esperar que MySQL sea healthy
        run: |
          until docker inspect -f "{{.State.Health.Status}}" mydb | grep -q "healthy"; do
            sleep 5
          done

      - name: Instalar Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Instalar dependencias
        run: npm install
        working-directory: ./backend

      - name: Correr Tests
        run: |
          export DB_HOST=localhost
          (timeout 10 npx mocha || true)
          if [ "$(timeout 10 npx mocha | grep -c '5 passing')" -eq 1 ]; then
            echo "Tests pasaron exitosamente."
          else
            echo "Los tests no pasaron. Terminando el flujo de trabajo."
            exit 1
          fi
        working-directory: ./backend

      - name: Correr backend
        run: nohup node app.js &    # Ejecuta la aplicaci√≥n en segundo plano
        working-directory: ./backend

      - name: Correr frontend
        run: |
          npm install
          nohup npm start &
        working-directory: ./frontend

      # - name: Build y Push Images
      #   run: |
      #     echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      #     docker build -t myapp ./backend
      #     docker tag myapp ${{ secrets.DOCKERHUB_USERNAME }}/myapp:backend
      #     docker push ${{ secrets.DOCKERHUB_USERNAME }}/myapp:backend

      #     docker build -t myapp ./frontend
      #     docker tag myapp ${{ secrets.DOCKERHUB_USERNAME }}/myapp:frontend
      #     docker push ${{ secrets.DOCKERHUB_USERNAME }}/myapp:frontend

      #     docker build -t mydb ./database
      #     docker tag mydb ${{ secrets.DOCKERHUB_USERNAME }}/myapp:database
      #     docker push ${{ secrets.DOCKERHUB_USERNAME }}/myapp:database
      #   working-directory: .
